AWSTemplateFormatVersion: 2010-09-09
Description: 
 Carlos Rivas / Udacity

Parameters:
    EnvironmentName:  
          Type: String

Resources:
    LBSecGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http to our load balancer
        VpcId:
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

    WebServerSecGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow http to our hosts and SSH from local only
        VpcId:
          Fn::ImportValue:
            !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0



    WebLaunchConfiguration:
      Type: AWS::AutoScaling::LaunchConfiguration
      Properties: 
          ImageId: ami-074251216af698218
          IamInstanceProfile: !Ref RootInstanceProfile
          UserData:
            Fn::Base64: !Sub |
              #!/bin/bash
              sudo  apt-get update -y
              sudo apt-get install apache2 -y
              sudo systemctl start apache2.service
              cd /var/www/html
              sudo chmod 777 /var/www/html -R
              echo "<h1> " It Works ! Udagram , Udacity " </h1>" > index.html
              
        
          SecurityGroups: 
          - Ref: "WebServerSecGroup"
          InstanceType: t3.medium
          BlockDeviceMappings:
          - DeviceName: "/dev/sdk"
            Ebs:
              VolumeSize: '10'

    WebServerGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      Properties:
        VPCZoneIdentifier:  
        - Fn::ImportValue: 
            !Sub ${EnvironmentName}-PRIV-NETS
        LaunchConfigurationName: !Ref WebLaunchConfiguration
        MinSize: '4'
        MaxSize: '6'
        TargetGroupARNs:
        - Ref: WebTargetGroup
        Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName} WebServer AS
            PropagateAtLaunch: "true"
        

    WebLB:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
        SecurityGroups:
        - Ref: LBSecGroup
        Tags:
          - Key: Name
            Value: !Sub ${EnvironmentName} Web LoadBalance

    LBListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebTargetGroup
        LoadBalancerArn:
          Ref: WebLB
        Port: '80'
        Protocol: HTTP

    LBListenerRules:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'LBListener'
        Priority: 1

    WebTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckIntervalSeconds: 10
        HealthCheckPath: /
        HealthCheckProtocol: HTTP
        HealthCheckTimeoutSeconds: 8
        HealthyThresholdCount: 2
        Port: 80
        Protocol: HTTP
        UnhealthyThresholdCount: 5
        VpcId: 
          Fn::ImportValue:
            Fn::Sub: "${EnvironmentName}-VPCID"

    RootRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ec2.amazonaws.com
              Action:
                  - 'sts:AssumeRole'
        ManagedPolicyArns:
            - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore    

    RootInstanceProfile: 
      Type: "AWS::IAM::InstanceProfile"
      Properties: 
        Path: "/"
        Roles: 
          - Ref: "RootRole"
Outputs:

    LoadBalanceDNSNAme:
      Description: Get DNS for load balancer with http URL
      Value: !Join ["" , ["http://", !GetAtt WebLB.DNSName] ]
      Export:
          Name: !Sub ${EnvironmentName}-Web-LoadBalancer
  